<h수>
글자의 크기를 나타낸다. 

<ol>
ordered list의 약자로 번호를 주어 순서대로 출력한다. 
<ol>
<li>
<li>
</ol>로 구성된다.

*ol 속성값 type="표현할 문자"
표현할 문자에 i를 쓰면 로마자 I는 로마자 대문자 A는 
*ol 속성값 reversed
뒤집혀진 순서로 출력한다.
<ul>
unordered list의 약자

<meta charset="utf-8">   
explorer에서 사용시 한글이 보이도록하기위해 설정해준다.


*meta 태그란? 
문서 그 자체를 설명하는 태그를 말한다. 

<br>
엔터와 같은 기능
<p>
한문장으로 이루어져 있다.


*태그의 종류 
단독 태그와 문단 태그로 이루어져 있다.
단독 태그는 마침 태그(</태그이름>)이 없이 시작되는 태그만 가지고 있는 것을 말하고(<br>이 있다.) 
문단 태그란 <P>와 </P>사이에 있는 내용들의 정렬이나 여백을 한꺼번에 설정해 주는 태그를 말한다.
<P>와</P>사이의 내용들은 한문단이 되어 </P>이후에내용을 작성하면 자동으로 한줄 띄어서 작성이 된다.


<a href="주소"> 

해당 주소로 넘어갈 수 있는 링크를 제공한다.

*해당 목록으로 갈 수 있도록 href에 이름값을 주기
태그의 속성 값 중에 특정 이름을 가진 태그로 이동시켜준다. 
#을 사용한다
<a href="#이름값">

<img src="주소" alt="이름">
이미지를 문서에 올린다. src에는 이미지 주소를 기재할 수도 있고 컴퓨터 내에 있는 주소도 기재할 수 있다. ㅇ
alt는 이미지가 나오지 않을 경우에 이름을 대신해 출력한다. 

<meta>
문서의 성질을 나타내는 태그이다. 
explorer에서도 사용할 수 있도록 <head>영역에 <meta charset="UTF-8">을 해준다.

*!+tap키

문서 작성에 필요한 기본양식을 제공하게 된다.

<table>
테이블을 생성하며 속성값으로 모양을 잡을 수있다
border="수"  테이블의 테두리설정

width="수px" 테이블의 크기 설정

cellspacing="수" 테이블을 구성하는 셀들 사이의 거리를 설정 

cellpadding ="수" 셀안의 공간크기를 설정 
<tr> 테이블 행
<td> 테이블 열


*빠르게 만들기 
table>tr[속성값]{$}*수>td[]{}*수

{}안에는 들어갈 내용 []는 설정할 태그 속성값 
테이블 뿐만 아니라 다른 태그에서도 사용가능하며 
수는 태그의 갯수를 설정한다.


*td 속성값 rowspan,colspan 
 한 셀이 몇행 또는 몇 칸을 차지할지 설정한다. 셀 병합과도 같다.

*<caption> 테이블 중간에 이름표를 만든다. 
*<th> table header로써 이름이 굵은 글씨로 바뀌게 된다.
*table 구성 구분하기 thead tbody tfoot
<thead> <tbody> <tfoot>을 사용해 나누어준다. 

*속성값 bgcolor =""
색을 변경시킨다. 

*속성값 font color=""
글자색을 변경시킨다. 

*속성값 align="head","center","right","left"
해당 테그의 위치를 지정한다.


<form aciton="지금 문서를 보낼 서버의 url" method="get 또는 post">
form은 일종의 양식으로 client가 server로 필요한 정보를 요청하면 server가 db에서 필요한 
정보가 있는지 없는지 검사를 하게 된다. 단 form 영역 안에 있는 것만 유무를 검사한다. 


ex)
    <form action="next.html" method="post">
    next.html로 페이지가 넘어간다. 
 ex)
  <form action="https://search.naver.com/search.naver?sm=top_hty&fbm=1&ie=utf8" method="get">
    <input type="text" name="query" id="">
       <input type="submit" value="검색">
       action에 보면 ?이전에 utf8까지 적혀있는데 이 양식이 만들어지는 문서에 
       아무 글이나 적고 submit을 누르면 naver 검색창에 문서에 적은 글이 자동으로 검색된다.
        
*get방식과 post 방식 
get방식은 주소창에 정보 요청을 적어서 보내는 것이고 빠르다. 
하지만 정보 유출과 255자 이상을 넘어가게 되면 사용이 불가능 하다는 단점이 있다.
post방식은 양식을 주소창으로부터 숨겨서 보내는데 정보 보호와 글자수 제한이 없다는 장점이 있지만 
get 방식보다는 느리다는 단점이 있다. 
따로 method설정을 하지 않을경우 get방식이 기본설정이다.
*querystring이란? 
url에서 ?이후부터 시작하는 문장을 말한다.
ex) http://127.0.0.1:53876/day2/next.html?id=asd&pwd=fasdf 에서는 id=asd&pwd=fasdf를 말한다.


<input>
속성값 type="종류" text인지 submit버튼인지 reset버튼인지 date달력인지 radio인지 checkbox인지 menu인지 설정가능
속성값 name=""     이름을 나타냄
속성값 placeholder="내용" text의 경우 아무것도 적지않으면 해당 내용이 적혀잇다.
속성값=value="이름" 버튼에 표시되는 이름을 나타냄


*type radio 에서
어느 한쪽에만 적히게 하려면 하나이상의 radio tag들의 name 속성을 같게 해주어야 한다. 


*블럭요소와 인라인 요소 ? 
블럭 요소란 h1,h2등 끝까지 공간을 가지고 있는 것들이다. 이 테그가 적힌 줄에는
다른 테그가 들어올 수 없다. 
인라인 요소 해당 테그가 적히는 공간 외의 공간에는 다른 테그가 그 공간을 자치할 
수 있다. 

<select>
선택기능이 있는 요소를 만들어 낸다. 
<select name="">
<option value="이름">이름
     '
     ' 
     필요한 갯수만큼 입력 
  
  

<canvas>
그림판 역할을 한다. 
  <canvas id="myCanvas" width="500px" height="500px">
  
script에서 
canvas의 정보를 가지고오고 
 var canvas= document.getElementById("myCanvas");

가져온 canvas객체를 통해 2dcontext 객체를 가지고 온 후에 
 var ctx = canvas.getContext("2d");
 
 필요한 명령어를 삽입한다. 
   //그림 그리기 시작 
            ctx.beginPath();
            //시작 지점으로 이동
            ctx.moveTo(50,50);
             //선긋기 
            ctx.lineTo(150,50);
            //선긋기
            ctx.lineTo(50,150);
            
            ctx.fillStyle="yellow";
            //사각형 그리기 
            ctx.fillRect(100,100,300,300);
            
            //경로 닫기 
            ctx.closePath();
            //선 색상 변경
            ctx.strokeStyle="aqua";
            //테두리 선그리기  
            ctx.stroke();
            //이름 채워넣기 
            var name ="아이유(전)";
            ctx.font="35px 나눔 펜글씨";
            ctx.fillText("이름: "+name , 20,80);
             //이미지 넣기 
            var IU=new Image();
             //이미지 소스 
            IU.src="../images/IU1.jpg";
             //그림그리기 함수 
            ctx.drawImage(IU,0,0,100,100)
            
            *그림이 움직이는 것처럼 설정하기 
            두개의 이미지를 같은 좌표에 겹친 후 if문을 통해 번갈아가면 나타나도록설정한다.
            
           ex)
            function drawScreen() {
            counter++;
            console.log(counter);
            //움직이는 것처럼 보이게 하기 
            ctx.drawImage(bgImg, 0, 0, 800, 600);
            if(counter%2==1){
            ctx.drawImage(rabbit1, 20, 200, 800, 400);}else{
            ctx.drawImage(rabbit2, 20, 200, 800, 400);}
        }
          또한 setinerval과 조합해 사용한다.
          ex)
             drawScreen();
            //1회 반복 window.setTimeout(함수명,지연시간);
            //계속 반복 window.setInterval(함수명,지연시간);
            window.setInterval(drawScreen,50);
            
            
 

 

 

